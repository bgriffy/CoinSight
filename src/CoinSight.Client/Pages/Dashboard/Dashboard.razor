@page "/"
@using CoinConstraint.Application.Budgeting
@using CoinConstraint.Domain.AggregateModels.BudgetingAggregate.Entities
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@implements IDisposable;

<div id="page-container">
    @if (!_isLoaded)
    {
        <div class="sb-content-overlay">
            <div class="sb-loading">
                <svg class="circular" height="40" width="40">
                    <circle class="path" cx="25" cy="25" r="20" fill="none" stroke-width="6" stroke-miterlimit="10" />
                </svg>
            </div>
        </div>
    }
    else
    {
        <div class="control-section dashboard-page">
            <div id="budget-filters-section">
                <p class="page-title">Dashboard</p>
                <SfDropDownList CssClass="budget-dropdown" TValue="int?"
                            TItem="Budget"
                            Placeholder="Select a budget"
                            DataSource="@_budgets"
                            Value=_selectedBudget.ID
                            ValueChanged="HandleSelectedBudgetChanged">
                    <DropDownListFieldSettings Value="@nameof(Budget.ID)" Text="@nameof(Budget.DateRange)" />
                </SfDropDownList>
            </div>

            <BudgetTotalCards @ref=_cardsRef />

            <ExpenseGrid @ref="_expenseGridRef" />

            <RecentTransactionsGrid StartDate="_selectedBudget.StartDate" EndDate="_selectedBudget.EndDate" />
        </div>
    }
</div>

<style>
    #main-page {
        overflow-x: hidden;
        background: linear-gradient(-141deg, #EEF5F7 14%, #EEF2FB 100%);
    }

    .sidebar-Rightpane {
        padding-bottom: 18px;
        margin-right: -2px;
    }
</style>



@code {
    private BudgetTotalCards _cardsRef;
    private ExpenseGrid _expenseGridRef;
    private RecentTransactionsGrid _transactionsGridRef;
    private bool _showSpinner = true;
    private bool _isLoaded;
    private List<Budget> _budgets = new();
    private Budget _selectedBudget = new();

    [Inject]
    public IBudgetingService BudgetingService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        _isLoaded = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await base.OnAfterRenderAsync(firstRender);
            await InvokeAsync((Func<Task>)(async () =>
            {
                await Task.Delay(1);
                UpdateChartData();
                StateHasChanged();
            }));
        }
    }

    private async Task LoadData()
    {
        await Task.Yield();
        _budgets = BudgetingService.GetAllBudgets();
        _selectedBudget = _budgets.First();
    }

    private void UpdateChartData()
    {
    }

    private void HandleSelectedBudgetChanged(int? id)
    {
        _selectedBudget = _budgets.FirstOrDefault(b => b.ID == id);
        _expenseGridRef?.RefreshExpenseGrid(id);
        _transactionsGridRef?.RefreshGrid();
    }

    public void Dispose()
    {
        _cardsRef = null;
        _expenseGridRef = null;
    }
}