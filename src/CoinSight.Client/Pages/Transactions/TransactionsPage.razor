@page "/transactions"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@implements IDisposable;

@if (_isLoaded)
{
    <div>
        <div class="transactions-page">
            <div class='transactions-content-container'>
                <div>
                    <p class="page-title">All Transactions</p>
                </div>
                <div>
                    <div class="col-md-12 margin-top col-lg-12">
                        <div class="transactions-search-padding" style="background-color: @color;">
                            <div class="search-wrapper search-section" style="display: @visibility;">
                                <div id="search">
                                    <SfTextBox Type="InputType.Search"
                                           ShowClearButton="true"
                                           Placeholder="Search"
                                           CssClass="search txt"
                                           @bind-Value="SearchValue"
                                           ValueChange="@(async () => await _transactGridRef.Search(SearchValue))"
                                           Created="OnCreate">
                                    </SfTextBox>
                                    <span id="searchbtn" class="e-search-icon transactions-search-icon e-icons" @onclick="@(() => _transactGridRef.Search(SearchValue))"></span>
                                </div>
                                <div class="button-section search-section">
                                    <button onclick="@(async() => await AddTransaction())" id="addexpense" class="e-btn small e-info">Add Transaction</button>
                                    <button id="filterTransactions" class="e-btn small e-info">Filter</button>
                                    <div id="add-btn" class='e-btn'>
                                        <span class='e-icons add-icon add-head-item'></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <TransactionsGrid @ref="_transactGridRef" FilterArgs="_filterArgs" />
                    </div>
                </div>
            </div>
            <FilterMenu @ref="FilterRef" FilterArgs=_filterArgs FilterArgsChanged="@(async(args) => await HandleFiltersChange(args))" />
        </div>
    </div>
}
else
{
    <div>
        <div class="search-skeleton">
            <SfSkeleton Shape="Syncfusion.Blazor.Notifications.SkeletonType.Rectangle" Height="30px" Width="100%" />
        </div>
        <div class="transaction-grid-skeleton">
            <SfSkeleton Shape="Syncfusion.Blazor.Notifications.SkeletonType.Rectangle" Height="700px" Width="100%" />
        </div>
        <div class="filter-skeleton">
            <SfSkeleton Shape="Syncfusion.Blazor.Notifications.SkeletonType.Rectangle" Height="815px" Width="100%" />
        </div>
    </div>
}

<style>
    #main-page {
        overflow-x: hidden;
        background: linear-gradient(-141deg, #EEF5F7 14%, #EEF2FB 100%);
    }
</style>

@code {
    public FilterMenu FilterRef;
    private TransactionsGrid _transactGridRef;
    public string SearchValue { get; set; }
    private string visibility = "none";
    private string color = "#FFFFFF";
    private bool _isLoaded;
    private TransactionFilterArgs _filterArgs = new();

    private async Task HandleFiltersChange(TransactionFilterArgs args)
    {
        _filterArgs = args;
        await _transactGridRef.RefreshGrid();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_isLoaded)
        {
            await base.OnAfterRenderAsync(firstRender);
        }
    }

    private void OnCreate()
    {
        this.visibility = ""; this.color = "";
    }

    public void Dispose()
    {
        _transactGridRef = null;
        FilterRef = null;
        _isLoaded = false;
    }

    private async void LoadData()
    {
        await Task.Delay(500);
        _filterArgs.StartDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
        _filterArgs.EndDate = _filterArgs.StartDate.AddMonths(1).AddDays(-1);
        _isLoaded = true;
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            LoadData();
        }
    }

    private async Task AddTransaction()
    {
        await _transactGridRef.AddTransaction();
    }
}