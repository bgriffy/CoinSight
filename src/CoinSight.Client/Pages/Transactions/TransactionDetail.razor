@implements IDisposable;
@using CoinConstraint.Application.Budgeting
@using CoinConstraint.Application.Transactions
@using CoinConstraint.Domain.AggregateModels.TransactionsAggregate.Entities
@using Syncfusion.Blazor.Popups;
@inject SfDialogService DialogService;

<div id='dlg-content'>
    @if (this.Transaction != null)
    {
        <div id="dialogTarget">
            <SfMessage Severity="MessageSeverity.Success" Visible=@_showDeleteMsg>The transaction(s) has been deleted successfully.</SfMessage>
            <SfMessage Severity="MessageSeverity.Success" Visible=@_showAddedMsg>The transaction has been added successfully.</SfMessage>
            <SfMessage Severity="MessageSeverity.Success" Visible=@_showSavedMsg>The transaction has been saved successfully.</SfMessage>
            <SfDialog @ref="_transcationDetailDialog" Width="100%" CssClass="transact-dialog" ShowCloseIcon="true" CloseOnEscape="false" IsModal="true" Target="#sidebarRightpane">
                <ChildContent>
                    <DialogTemplates>
                        <Header>@_dialogHeader</Header>
                    </DialogTemplates>
                    <div class='dlg-content'>
                        <div class="expensedetail-dialog">
                            <div class="expense-detail-input-group">
                                <SfTextBox @bind-Value=Transaction.Payee Placeholder="Payee" FloatLabelType="FloatLabelType.Always" />
                            </div>
                            <div class="expense-detail-input-group">
                                <SfDatePicker @bind-Value=Transaction.TransactionDate Placeholder="Date" FloatLabelType="FloatLabelType.Always" />
                                <SfTextBox @bind-Value=Transaction.PaymentMode Placeholder="Payment Mode" FloatLabelType="FloatLabelType.Always" />
                            </div>
                            <div class="expense-detail-input-group">
                                <SfTextBox @bind-Value=Transaction.Description Placeholder="Description" FloatLabelType="FloatLabelType.Always" />
                            </div>
                            <div class="expense-detail-input-group">
                                <SfNumericTextBox @bind-Value=Transaction.InflowAmount Placeholder="Inflow" FloatLabelType="FloatLabelType.Always" />
                                <SfNumericTextBox @bind-Value=Transaction.OutflowAmount Placeholder="Outflow" FloatLabelType="FloatLabelType.Always" />
                            </div>
                        </div>
                    </div>
                    <DialogButtons>
                        <DialogButton Content="Save" CssClass="e-info e-add" IsPrimary="true" OnClick="HandleSaveClick" />
                        <DialogButton Content="Cancel" CssClass="e-outline e-cancel" OnClick="HandleCancelClick" />
                    </DialogButtons>
                </ChildContent>
            </SfDialog>
        </div>
    }
    <Syncfusion.Blazor.Popups.SfDialogProvider />
</div>

<style>
    .expense-detail-input-group {
        margin-bottom: 2rem;
        display: flex;
        gap: 3rem;
    }

    .e-message {
        position: absolute;
        top: 0%;
        right: 0%;
        width: 86%;
        letter-spacing: 0.5px;
        margin: 0;
        font-size: 16px;
        font-weight: 600;
    }

    @@media (max-width: 600px) {
        .e-message {
            top: 8%;
            width: 100%;
        }
    }
</style>

@code {
    private SfDialog _transcationDetailDialog = new();
    public string _dialogHeader { get; set; }
    public bool _showAddedMsg;
    public bool _showDeleteMsg;
    public bool _showSavedMsg;
    private bool _isNew;

    [Parameter]
    public Transaction Transaction { get; set; }

    [Parameter]
    public EventCallback TransactionUpdated { get; set; }

    [Inject]
    public ITransactionService TransactionService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this._dialogHeader = "Transaction Details";
    }

    public async Task ShowAddDialog()
    {
        _isNew = true;
        await _transcationDetailDialog.ShowAsync();
    }

    public async Task ShowEditDialog()
    {
        await _transcationDetailDialog.ShowAsync();
    }

    public async Task HandleSaveClick()
    {
        if (_isNew)
        {
            await TransactionService.AddTransaction(Transaction);
        }
        else
        {
            await TransactionService.UpdateTransaction(Transaction);
        }

        //await TransactionService.Init();

        await TransactionUpdated.InvokeAsync();

        await _transcationDetailDialog.HideAsync();
    }

    public async Task HandleCancelClick()
    {
        await _transcationDetailDialog.HideAsync();
    }

    public void Dispose()
    {
        _transcationDetailDialog = null;
    }
}